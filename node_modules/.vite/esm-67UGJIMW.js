import {
  Wallet
} from "./chunk-IQH457GE.js";
import {
  require_eventemitter3
} from "./chunk-4SJGJPHQ.js";
import {
  __toModule,
  init_define_process_env
} from "./chunk-KP4UBDXM.js";

// node_modules/salmon-adapter-sdk/lib/esm/index.js
init_define_process_env();
var import_eventemitter32 = __toModule(require_eventemitter3());

// node_modules/salmon-adapter-sdk/lib/esm/adapter.js
init_define_process_env();
var import_eventemitter3 = __toModule(require_eventemitter3());
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var WalletAdapter = function(_super) {
  __extends(WalletAdapter2, _super);
  function WalletAdapter2(provider, network) {
    var _this = _super.call(this) || this;
    _this._instance = null;
    _this._handleConnect = function() {
      _this.emit("connect");
    };
    _this._handleDisconnect = function() {
      window.clearInterval(_this._pollTimer);
      _this.emit("disconnect");
    };
    _this._provider = provider;
    _this._network = network;
    return _this;
  }
  Object.defineProperty(WalletAdapter2.prototype, "publicKey", {
    get: function() {
      return this._instance.publicKey || null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(WalletAdapter2.prototype, "connected", {
    get: function() {
      return this._instance.connected || false;
    },
    enumerable: false,
    configurable: true
  });
  WalletAdapter2.prototype.connect = function() {
    return __awaiter(this, void 0, void 0, function() {
      var _this = this;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            this._instance = new Wallet(this._provider, this._network);
            this._instance.on("connect", this._handleConnect);
            this._instance.on("disconnect", this._handleDisconnect);
            this._pollTimer = window.setInterval(function() {
              var _a2, _b;
              if (((_b = (_a2 = _this._instance) === null || _a2 === void 0 ? void 0 : _a2._popup) === null || _b === void 0 ? void 0 : _b.closed) !== false) {
                _this._handleDisconnect();
              }
            }, 200);
            return [4, this._instance.connect()];
          case 1:
            _a.sent();
            return [2];
        }
      });
    });
  };
  WalletAdapter2.prototype.disconnect = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!this.connected) {
              throw new Error("Wallet not connected");
            }
            this._instance.removeAllListeners("connect");
            this._instance.removeAllListeners("disconnect");
            return [4, this._instance.disconnect()];
          case 1:
            _a.sent();
            return [2];
        }
      });
    });
  };
  WalletAdapter2.prototype.signTransaction = function(transaction) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!this.connected) {
              throw new Error("Wallet not connected");
            }
            return [4, this._instance.signTransaction(transaction)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  WalletAdapter2.prototype.signAllTransactions = function(transactions) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!this.connected) {
              throw new Error("Wallet not connected");
            }
            return [4, this._instance.signAllTransactions(transactions)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  WalletAdapter2.prototype.signMessage = function(data, display) {
    if (display === void 0) {
      display = "hex";
    }
    return __awaiter(this, void 0, void 0, function() {
      var signature;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!this.connected) {
              throw new Error("Wallet not connected");
            }
            return [4, this._instance.sign(data, display)];
          case 1:
            signature = _a.sent().signature;
            return [2, Uint8Array.from(signature)];
        }
      });
    });
  };
  return WalletAdapter2;
}(import_eventemitter3.default);
var adapter_default = WalletAdapter;

// node_modules/salmon-adapter-sdk/lib/esm/index.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var Salmon = function(_super) {
  __extends2(Salmon2, _super);
  function Salmon2(config) {
    var _this = _super.call(this) || this;
    _this._network = "mainnet-beta";
    _this._provider = "https://www.salmonwallet.io";
    _this._adapterInstance = null;
    _this._connectHandler = null;
    _this._connected = function() {
      if (_this._connectHandler) {
        _this._connectHandler.resolve();
        _this._connectHandler = null;
      }
      _this.emit("connect", _this.publicKey);
    };
    _this._disconnected = function() {
      if (_this._connectHandler) {
        _this._connectHandler.reject();
        _this._connectHandler = null;
      }
      _this._adapterInstance = null;
      _this.emit("disconnect");
    };
    if (config === null || config === void 0 ? void 0 : config.network) {
      _this._network = config === null || config === void 0 ? void 0 : config.network;
    }
    if (config === null || config === void 0 ? void 0 : config.provider) {
      _this._provider = config === null || config === void 0 ? void 0 : config.provider;
    }
    return _this;
  }
  Object.defineProperty(Salmon2.prototype, "publicKey", {
    get: function() {
      var _a;
      return ((_a = this._adapterInstance) === null || _a === void 0 ? void 0 : _a.publicKey) || null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Salmon2.prototype, "isConnected", {
    get: function() {
      var _a;
      return !!((_a = this._adapterInstance) === null || _a === void 0 ? void 0 : _a.connected);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Salmon2.prototype, "connected", {
    get: function() {
      return this.isConnected;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Salmon2.prototype, "autoApprove", {
    get: function() {
      return false;
    },
    enumerable: false,
    configurable: true
  });
  Salmon2.prototype.connect = function() {
    return __awaiter2(this, void 0, void 0, function() {
      var _this = this;
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (this.connected) {
              return [2];
            }
            this._adapterInstance = new adapter_default(this._provider, this._network);
            this._adapterInstance.on("connect", this._connected);
            this._adapterInstance.on("disconnect", this._disconnected);
            this._adapterInstance.connect();
            return [4, new Promise(function(resolve, reject) {
              _this._connectHandler = { resolve, reject };
            })];
          case 1:
            _a.sent();
            return [2];
        }
      });
    });
  };
  Salmon2.prototype.disconnect = function() {
    return __awaiter2(this, void 0, void 0, function() {
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!this._adapterInstance) {
              return [2];
            }
            return [4, this._adapterInstance.disconnect()];
          case 1:
            _a.sent();
            return [2];
        }
      });
    });
  };
  Salmon2.prototype.signTransaction = function(transaction) {
    return __awaiter2(this, void 0, void 0, function() {
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!this.connected) {
              throw new Error("Wallet not connected");
            }
            return [4, this._adapterInstance.signTransaction(transaction)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Salmon2.prototype.signAllTransactions = function(transactions) {
    return __awaiter2(this, void 0, void 0, function() {
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!this.connected) {
              throw new Error("Wallet not connected");
            }
            return [4, this._adapterInstance.signAllTransactions(transactions)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Salmon2.prototype.signMessage = function(data, display) {
    if (display === void 0) {
      display = "utf8";
    }
    return __awaiter2(this, void 0, void 0, function() {
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!this.connected) {
              throw new Error("Wallet not connected");
            }
            return [4, this._adapterInstance.signMessage(data, display)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Salmon2.prototype.sign = function(data, display) {
    if (display === void 0) {
      display = "utf8";
    }
    return __awaiter2(this, void 0, void 0, function() {
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.signMessage(data, display)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  return Salmon2;
}(import_eventemitter32.default);
var esm_default = Salmon;
export {
  esm_default as default
};
//# sourceMappingURL=esm-67UGJIMW.js.map
